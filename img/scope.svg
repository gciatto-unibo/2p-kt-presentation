<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="642px" preserveAspectRatio="none" style="width:383px;height:642px;" version="1.1" viewBox="0 0 383 642" width="383px" zoomAndPan="magnify"><defs/><g><!--MD5=[bece8b4c4229b3549b4a8159d27930ed]
class Scope--><rect fill="#FEFECE" height="624.2109" id="Scope" style="stroke: #A80036; stroke-width: 1.5;" width="365" x="7" y="7"/><ellipse cx="165.75" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M161.6719,18.7656 L161.6719,16.6094 L169.0625,16.6094 L169.0625,18.7656 L166.5938,18.7656 L166.5938,26.8438 L169.0625,26.8438 L169.0625,29 L161.6719,29 L161.6719,26.8438 L164.1406,26.8438 L164.1406,18.7656 L161.6719,18.7656 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="39" x="186.25" y="27.1543">Scope</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="8" x2="371" y1="39" y2="39"/><ellipse cx="18" cy="50" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="33" x="27" y="53.2104">_: Var</text><ellipse cx="18" cy="62.8047" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="27" y="66.0151">variables: Map&lt;String, Var&gt;</text><ellipse cx="18" cy="75.6094" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="27" y="78.8198">contains(variable: Var): Boolean</text><ellipse cx="18" cy="88.4141" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="27" y="91.6245">contains(variable: String): Boolean</text><ellipse cx="18" cy="101.2188" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="27" y="104.4292">get(variable: String): Var?</text><ellipse cx="18" cy="114.0234" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="27" y="117.2339">varOf(name: String): Var</text><ellipse cx="18" cy="126.8281" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="27" y="130.0386">anonymous(): Var</text><ellipse cx="18" cy="139.6328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="27" y="142.8433">whatever(): Var</text><ellipse cx="18" cy="152.4375" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="27" y="155.6479">atomOf(value: String): Atom</text><ellipse cx="18" cy="165.2422" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="27" y="168.4526">structOf(functor: String, vararg args: Term): Struct</text><ellipse cx="18" cy="178.0469" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="27" y="181.2573">structOf(functor: String, args: Sequence&lt;Term&gt;): Struct</text><ellipse cx="18" cy="190.8516" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="27" y="194.062">tupleOf(vararg terms: Term): Tuple</text><ellipse cx="18" cy="203.6563" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="27" y="206.8667">tupleOf(terms: Iterable&lt;Term&gt;): Tuple</text><ellipse cx="18" cy="216.4609" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="27" y="219.6714">listOf(vararg terms: Term): List</text><ellipse cx="18" cy="229.2656" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="27" y="232.4761">emptyList(): EmptyList</text><ellipse cx="18" cy="242.0703" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="27" y="245.2808">emptySet(): EmptySet</text><ellipse cx="18" cy="254.875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="27" y="258.0854">listOf(terms: Iterable&lt;Term&gt;): List</text><ellipse cx="18" cy="267.6797" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="325" x="27" y="270.8901">listFrom(terms: Iterable&lt;Term&gt;, last: Term? = null): List</text><ellipse cx="18" cy="280.4844" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="208" x="27" y="283.6948">setOf(vararg terms: Term): LogicSet</text><ellipse cx="18" cy="293.2891" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="228" x="27" y="296.4995">setOf(terms: Iterable&lt;Term&gt;): LogicSet</text><ellipse cx="18" cy="306.0938" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="27" y="309.3042">factOf(head: Struct): Fact</text><ellipse cx="18" cy="318.8984" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="27" y="322.1089">ruleOf(head: Struct, body1: Term, vararg body: Term): Rule</text><ellipse cx="18" cy="331.7031" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="27" y="334.9136">directiveOf(body1: Term, vararg body: Term): Directive</text><ellipse cx="18" cy="344.5078" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="295" x="27" y="347.7183">clauseOf(head: Struct?, vararg body: Term): Clause</text><ellipse cx="18" cy="357.3125" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="27" y="360.5229">consOf(head: Term, tail: Term): Cons</text><ellipse cx="18" cy="370.1172" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="27" y="373.3276">indicatorOf(name: Term, arity: Term): Indicator</text><ellipse cx="18" cy="382.9219" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="27" y="386.1323">indicatorOf(name: String, arity: Int): Indicator</text><ellipse cx="18" cy="395.7266" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="179" x="27" y="398.937">numOf(value: BigDecimal): Real</text><ellipse cx="18" cy="408.5313" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="27" y="411.7417">numOf(value: Double): Real</text><ellipse cx="18" cy="421.3359" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="27" y="424.5464">numOf(value: Float): Real</text><ellipse cx="18" cy="434.1406" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="27" y="437.3511">numOf(value: BigInteger): Integer</text><ellipse cx="18" cy="446.9453" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="27" y="450.1558">numOf(value: Int): Integer</text><ellipse cx="18" cy="459.75" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="27" y="462.9604">numOf(value: Long): Integer</text><ellipse cx="18" cy="472.5547" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="27" y="475.7651">numOf(value: Short): Integer</text><ellipse cx="18" cy="485.3594" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="27" y="488.5698">numOf(value: Byte): Integer</text><ellipse cx="18" cy="498.1641" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="27" y="501.3745">numOf(value: String): Numeric</text><ellipse cx="18" cy="510.9688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="27" y="514.1792">truthOf(value: Boolean): Truth</text><line style="stroke: #A80036; stroke-width: 1.0;" x1="8" x2="371" y1="520.7734" y2="520.7734"/><ellipse cx="18" cy="531.7734" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="86" x="27" y="534.9839">empty(): Scope</text><ellipse cx="18" cy="544.5781" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="212" x="27" y="547.7886">&lt;R&gt; empty(lambda: Scope.() -&gt; R): R</text><ellipse cx="18" cy="557.3828" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="170" x="27" y="560.5933">of(vararg vars: String): Scope</text><ellipse cx="18" cy="570.1875" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="318" x="27" y="573.3979">of(vararg vars: String, lambda: Scope.() -&gt; Unit): Scope</text><ellipse cx="18" cy="582.9922" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="155" x="27" y="586.2026">of(vararg vars: Var): Scope</text><ellipse cx="18" cy="595.7969" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="303" x="27" y="599.0073">of(vararg vars: Var, lambda: Scope.() -&gt; Unit): Scope</text><ellipse cx="18" cy="608.6016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="304" x="27" y="611.812">&lt;R&gt; of(vararg vars: String, lambda: Scope.() -&gt; R): R</text><ellipse cx="18" cy="621.4063" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="289" x="27" y="624.6167">&lt;R&gt; of(vararg vars: Var, lambda: Scope.() -&gt; R): R</text><!--MD5=[f8486e68a8b947c05d3423639f10bfc4]
@startuml
skinparam shadowing false

interface Scope {
    + _: Var
    + variables: Map<String, Var>
    + contains(variable: Var): Boolean
    + contains(variable: String): Boolean
    + get(variable: String): Var?
    + varOf(name: String): Var
    + anonymous(): Var
    + whatever(): Var
    + atomOf(value: String): Atom
    + structOf(functor: String, vararg args: Term): Struct
    + structOf(functor: String, args: Sequence<Term>): Struct
    + tupleOf(vararg terms: Term): Tuple
    + tupleOf(terms: Iterable<Term>): Tuple
    + listOf(vararg terms: Term): List
    + emptyList(): EmptyList
    + emptySet(): EmptySet
    + listOf(terms: Iterable<Term>): List
    + listFrom(terms: Iterable<Term>, last: Term? = null): List
    + setOf(vararg terms: Term): LogicSet
    + setOf(terms: Iterable<Term>): LogicSet
    + factOf(head: Struct): Fact
    + ruleOf(head: Struct, body1: Term, vararg body: Term): Rule
    + directiveOf(body1: Term, vararg body: Term): Directive
    + clauseOf(head: Struct?, vararg body: Term): Clause
    + consOf(head: Term, tail: Term): Cons
    + indicatorOf(name: Term, arity: Term): Indicator
    + indicatorOf(name: String, arity: Int): Indicator
    + numOf(value: BigDecimal): Real
    + numOf(value: Double): Real
    + numOf(value: Float): Real
    + numOf(value: BigInteger): Integer
    + numOf(value: Int): Integer
    + numOf(value: Long): Integer
    + numOf(value: Short): Integer
    + numOf(value: Byte): Integer
    + numOf(value: String): Numeric
    + truthOf(value: Boolean): Truth
    - - -
    + {static} empty(): Scope
    + {static} <R> empty(lambda: Scope.() -> R): R
    + {static} of(vararg vars: String): Scope
    + {static} of(vararg vars: String, lambda: Scope.() -> Unit): Scope
    + {static} of(vararg vars: Var): Scope
    + {static} of(vararg vars: Var, lambda: Scope.() -> Unit): Scope
    + {static} <R> of(vararg vars: String, lambda: Scope.() -> R): R
    + {static} <R> of(vararg vars: Var, lambda: Scope.() -> R): R
}
@enduml

PlantUML version 1.2020.02(Sun Mar 01 11:22:07 CET 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.10+9
Operating System: Linux
Default Encoding: UTF-8
Language: it
Country: IT
--></g></svg>