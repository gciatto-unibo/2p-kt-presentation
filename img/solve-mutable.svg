<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="305px" preserveAspectRatio="none" style="width:754px;height:305px;" version="1.1" viewBox="0 0 754 305" width="754px" zoomAndPan="magnify"><defs><filter height="300%" id="f19j6nrp4zdil9" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[7e0cc054e68485d8dbab588155cf841a]
class Solver--><rect codeLine="1" fill="#FEFECE" filter="url(#f19j6nrp4zdil9)" height="256.0703" id="Solver" style="stroke:#A80036;stroke-width:1.5;" width="390" x="7" y="21.5"/><ellipse cx="179.25" cy="37.5" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M180.2031,34.2813 L181.9219,34.2813 C182.3125,34.2813 182.5,34.25 182.625,34.1719 C182.8906,34.0156 183.0313,33.7344 183.0313,33.4375 C183.0313,33.1719 182.9219,32.9063 182.6875,32.7344 C182.5156,32.625 182.375,32.5938 181.9219,32.5938 L176.7813,32.5938 C176.3438,32.5938 176.2188,32.6094 176.0625,32.7031 C175.8125,32.8594 175.6563,33.1563 175.6563,33.4375 C175.6563,33.7188 175.7969,33.9688 176.0156,34.1406 C176.1719,34.25 176.3594,34.2813 176.7813,34.2813 L178.5,34.2813 L178.5,40.7969 L176.7813,40.7969 C176.3438,40.7969 176.2188,40.8125 176.0625,40.9219 C175.8125,41.0781 175.6563,41.3594 175.6563,41.6563 C175.6563,41.9063 175.7969,42.1719 176.0156,42.3281 C176.1719,42.4531 176.375,42.5 176.7813,42.5 L181.9219,42.5 C182.6719,42.5 183.0313,42.2188 183.0313,41.6563 C183.0313,41.375 182.9219,41.125 182.6875,40.9531 C182.5156,40.8281 182.375,40.7969 181.9219,40.7969 L180.2031,40.7969 L180.2031,34.2813 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="37" x="199.75" y="41.6543">Solver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="396" y1="53.5" y2="53.5"/><ellipse cx="18" cy="64.5" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="100" x="27" y="67.7104">libraries: Libraries</text><ellipse cx="18" cy="77.3047" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="88" x="27" y="80.5151">flags: FlagStore</text><ellipse cx="18" cy="90.1094" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="91" x="27" y="93.3198">staticKb: Theory</text><ellipse cx="18" cy="102.9141" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="109" x="27" y="106.1245">dynamicKb: Theory</text><ellipse cx="18" cy="115.7188" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="131" x="27" y="118.9292">operators: OperatorSet</text><ellipse cx="18" cy="128.5234" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="27" y="131.7339">inputChannels: InputStore</text><ellipse cx="18" cy="141.3281" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="165" x="27" y="144.5386">outputChannels: OutputStore</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="8" x2="396" y1="151.1328" y2="151.1328"/><ellipse cx="18" cy="162.1328" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="210" x="27" y="165.3433">standardInput: InputChannel&lt;String&gt;</text><ellipse cx="18" cy="174.9375" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="230" x="27" y="178.1479">standardOutput: OutputChannel&lt;String&gt;</text><ellipse cx="18" cy="187.7422" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="218" x="27" y="190.9526">standardError: OutputChannel&lt;String&gt;</text><ellipse cx="18" cy="200.5469" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="240" x="27" y="203.7573">warnings: OutputChannel&lt;PrologWarning&gt;</text><line style="stroke:#A80036;stroke-width:1.0;" x1="8" x2="396" y1="210.3516" y2="210.3516"/><ellipse cx="18" cy="221.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="364" x="27" y="224.562">solve(goal: Struct, options: SolveOptions): Sequence&lt;Solution&gt;</text><ellipse cx="18" cy="234.1563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="343" x="27" y="237.3667">solveList(goal: Struct, options: SolveOptions): List&lt;Solution&gt;</text><ellipse cx="18" cy="246.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="317" x="27" y="250.1714">solveOnce(goal: Struct, options: SolveOptions): Solution</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="8" x2="396" y1="256.7656" y2="256.7656"/><ellipse cx="18" cy="267.7656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="27" y="270.9761">clone(): Solver</text><!--MD5=[3e143235bd6fa0cae4b93f541904023f]
class MutableSolver--><rect codeLine="22" fill="#FEFECE" filter="url(#f19j6nrp4zdil9)" height="284.875" id="MutableSolver" style="stroke:#A80036;stroke-width:1.5;" width="308" x="432" y="7"/><ellipse cx="539.25" cy="23" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M540.2031,19.7813 L541.9219,19.7813 C542.3125,19.7813 542.5,19.75 542.625,19.6719 C542.8906,19.5156 543.0313,19.2344 543.0313,18.9375 C543.0313,18.6719 542.9219,18.4063 542.6875,18.2344 C542.5156,18.125 542.375,18.0938 541.9219,18.0938 L536.7813,18.0938 C536.3438,18.0938 536.2188,18.1094 536.0625,18.2031 C535.8125,18.3594 535.6563,18.6563 535.6563,18.9375 C535.6563,19.2188 535.7969,19.4688 536.0156,19.6406 C536.1719,19.75 536.3594,19.7813 536.7813,19.7813 L538.5,19.7813 L538.5,26.2969 L536.7813,26.2969 C536.3438,26.2969 536.2188,26.3125 536.0625,26.4219 C535.8125,26.5781 535.6563,26.8594 535.6563,27.1563 C535.6563,27.4063 535.7969,27.6719 536.0156,27.8281 C536.1719,27.9531 536.375,28 536.7813,28 L541.9219,28 C542.6719,28 543.0313,27.7188 543.0313,27.1563 C543.0313,26.875 542.9219,26.625 542.6875,26.4531 C542.5156,26.3281 542.375,26.2969 541.9219,26.2969 L540.2031,26.2969 L540.2031,19.7813 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="85" x="559.75" y="27.1543">MutableSolver</text><line style="stroke:#A80036;stroke-width:1.5;" x1="433" x2="739" y1="39" y2="39"/><ellipse cx="443" cy="50" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="192" x="452" y="53.2104">loadLibrary(library: AliasedLibrary)</text><ellipse cx="443" cy="62.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="202" x="452" y="66.0151">unloadLibrary(library: AliasedLibrary</text><ellipse cx="443" cy="75.6094" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="174" x="452" y="78.8198">setLibraries(libraries: Libraries)</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="433" x2="739" y1="85.4141" y2="85.4141"/><ellipse cx="443" cy="96.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="162" x="452" y="99.6245">loadStaticKb(theory: Theory)</text><ellipse cx="443" cy="109.2188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="260" x="452" y="112.4292">loadStaticClauses(clauses: Iterable&lt;Clause&gt;)</text><ellipse cx="443" cy="122.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="181" x="452" y="125.2339">appendStaticKb(theory: Theory)</text><ellipse cx="443" cy="134.8281" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="84" x="452" y="138.0386">resetStaticKb()</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="433" x2="739" y1="144.6328" y2="144.6328"/><ellipse cx="443" cy="155.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="452" y="158.8433">loadDynamicKb(theory: Theory)</text><ellipse cx="443" cy="168.4375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="278" x="452" y="171.6479">loadDynamicClauses(clauses: Iterable&lt;Clause&gt;)</text><ellipse cx="443" cy="181.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="199" x="452" y="184.4526">appendDynamicKb(theory: Theory)</text><ellipse cx="443" cy="194.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="102" x="452" y="197.2573">resetDynamicKb()</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="433" x2="739" y1="203.8516" y2="203.8516"/><ellipse cx="443" cy="214.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="452" y="218.062">assertA(clause: Clause)</text><ellipse cx="443" cy="227.6563" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="134" x="452" y="230.8667">assertZ(clause: Clause)</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="433" x2="739" y1="237.4609" y2="237.4609"/><ellipse cx="443" cy="248.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="268" x="452" y="251.6714">retract(clause: Clause): RetractResult&lt;Theory&gt;</text><ellipse cx="443" cy="261.2656" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="282" x="452" y="264.4761">retractAll(clause: Clause): RetractResult&lt;Theory&gt;</text><line style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:1.0,2.0;" x1="433" x2="739" y1="271.0703" y2="271.0703"/><ellipse cx="443" cy="282.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="198" x="452" y="285.2808">setFlag(name: String, value: Term)</text><!--MD5=[de8f0ad3803f527318d68c48024affec]
reverse link Solver to MutableSolver--><path codeLine="46" d="M417.45,149.5 C422.179,149.5 426.908,149.5 431.637,149.5 " fill="none" id="Solver-backto-MutableSolver" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="417.375,156.5,397.375,149.5,417.375,142.5,417.375,156.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[660c9b62cd126e2ef1a3d7e1f99e27b0]
@startuml
interface Solver {
    + libraries: Libraries
    + flags: FlagStore
    + staticKb: Theory
    + dynamicKb: Theory
    + operators: OperatorSet
    + inputChannels: InputStore
    + outputChannels: OutputStore
    ..
    + standardInput: InputChannel<String>
    + standardOutput: OutputChannel<String>
    + standardError: OutputChannel<String>
    + warnings: OutputChannel<PrologWarning>
    - -
    + solve(goal: Struct, options: SolveOptions): Sequence<Solution>
    + solveList(goal: Struct, options: SolveOptions): List<Solution>
    + solveOnce(goal: Struct, options: SolveOptions): Solution
    ..
    + clone(): Solver
}

interface MutableSolver {
      + loadLibrary(library: AliasedLibrary)
      + unloadLibrary(library: AliasedLibrary
      + setLibraries(libraries: Libraries)
      ..
      + loadStaticKb(theory: Theory)
      + loadStaticClauses(clauses: Iterable<Clause>)
      + appendStaticKb(theory: Theory)
      + resetStaticKb()
      ..
      + loadDynamicKb(theory: Theory)
      + loadDynamicClauses(clauses: Iterable<Clause>)
      + appendDynamicKb(theory: Theory)
      + resetDynamicKb()
      ..
      + assertA(clause: Clause)
      + assertZ(clause: Clause)
      ..
      + retract(clause: Clause): RetractResult<Theory>
      + retractAll(clause: Clause): RetractResult<Theory>
      ..
      + setFlag(name: String, value: Term)
}

MutableSolver -left-|> Solver
@enduml

PlantUML version 1.2021.5beta3(Unknown compile time)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>